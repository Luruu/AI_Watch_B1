#CREA LE POLICY
curl -X PUT 'http://localhost:8080/api/2/policies/aiwatch:policy' -u 'ditto:ditto' -H 'Content-Type: application/json' -d @policy.json

#CREA UN DIGITAL TWIN
curl -u 'ditto:ditto' -X PUT -H 'Content-Type: application/json' -d '{
  "definition": "digitaltwin:Camera01:1",
  "policyId": "aiwatch:policy",
  "attributes": {
    "id_camera": "01"
  },
  "features": {
   "coordinates": {
     "properties": {
       "x": 0, 
       "y": 0,
       "z": 0,
       "x_rotation": 0,
       "y_rotation": 0,
       "w_rotation": 0,
       "z_rotation": 0
      }
    }
  }
}' http://localhost:8080/api/2/things/org.eclipse.ditto:camera01

curl -u ditto:ditto -X DELETE -H 'Content-Type: application/json' -d '{
      "topic": "org.eclipse.ditto/camera01/things/twin/commands/modify",
      "path": "/"
}' 'http://localhost:8080/api/2/things/org.eclipse.ditto:camera02'
   

curl -u ditto:ditto -X GET 'http://localhost:8080/api/2/things/org.eclipse.ditto:camera01' | python -m json.tool
 

curl -u ditto:ditto -X PUT -H 'Content-Type: application/json' -d '{
   "topic": "org.eclipse.ditto/camera01/things/twin/commands/delete",
   "path": "/"
 }' 'http://localhost:8080/api/2/things/org.eclipse.ditto:camera01'

 curl -u ditto:ditto -X PUT -H 'Content-Type: application/json' -d '77' 'http://localhost:8080/api/2/things/org.eclipse.ditto:camera07/features/coordinates/properties/x'




---------------------




curl -u ditto:ditto -X PUT -H 'Content-Type: application/json' -d '{
      "topic": "org.eclipse.ditto/camera01/things/twin/commands/delete",
      "path": "/"
}' 'c'
   



  

curl -X PUT 'http://localhost:8080/api/2/policies/camera:policy' -u 'ditto:ditto' -H 'Content-Type: application/json' -d @cmd.json


curl -X PUT 'http://localhost:8080/api/2/policies/aiwatch:laboratorio-corridoio_dt' 
-u 'ditto:ditto' -H 'Content-Type: application/json' -d @policy.json ##############à


   


curl -X PUT 'http://localhost:8080/api/2/things/digitaltwin:Laboratorio_Corridoio' -u 'ditto:ditto' -H 'Content-Type: application/json' -d @digitaltwin.json ###



curl -X POST 'http://localhost:8080/devops/piggyback/connectivity?timeout=10' -u 'devops:foobar' -H 'Content-Type: application/json' -d @connectionSource.json
curl -X POST 'http://localhost:8080/devops/piggyback/connectivity?timeout=10' -u 'devops:foobar' -H 'Content-Type: application/json' -d @connectionTarget.json

http://localhost:8080/api/2/things/org.eclipse.ditto:camera01


cd /Users/cvprlab/Documents/AIWatch-DT_AD/kafka_2.13-2.8.1
bin/zookeeper-server-start.sh config/zookeeper.properties
bin/kafka-server-start.sh config/server.properties
bin/kafka-console-consumer.sh --topic t1 --bootstrap-server 192.168.160.195:29092
bin/kafka-console-consumer.sh --bootstrap-server 192.168.160.195:29092 --consumer.config config/consumer.properties --topic topic1
bin/kafka-console-consumer.sh --topic topic_ditto --bootstrap-server 192.168.160.195:29092
bin/kafka-console-consumer.sh --topic topic_ditto_reply --bootstrap-server 192.168.160.195:29092
bin/kafka-console-consumer.sh --topic topic_unity --bootstrap-server 192.168.160.195:29092
 bin/kafka-console-producer.sh --bootstrap-server 192.168.160.195:29092 --producer.config config/producer.properties --topic topic_test


https://github.com/eclipse/ditto/blob/master/deployment/docker/README.md istruzioni per avviare/chiduere etc ditto
docker-compose up -d   //crea e avvia i container
docker-compose logs -f //vedi logs
docker-compose down //cancella i container e stoppandoli
----------------------------

COMANDI DA USARE IN ORDINE: 


curl -X PUT 'http://localhost:8080/api/2/policies/aiwatch:laboratorio-corridoio_dt' -u 'ditto:ditto' -H 'Content-Type: application/json' -d @policy.json

curl -X PUT 'http://localhost:8080/api/2/things/digitaltwin:Laboratorio_Corridoio' -u 'ditto:ditto' -H 'Content-Type: application/json' -d @digitaltwin.json

curl -X POST 'http://localhost:8080/devops/piggyback/connectivity?timeout=10' -u 'devops:foobar' -H 'Content-Type: application/json' -d @connectionSource.json

curl -X POST 'http://localhost:8080/devops/piggyback/connectivity?timeout=10' -u 'devops:foobar' -H 'Content-Type: application/json' -d @connectionTarget.json

-----------------------------------------------------
# COMANDI 1 OTT 2022
1) sudo docker-compose up (aggiungendo -d si può non bloccare il terminale ma parrebbe no far visualizzare l'output a docker ps successivamente) nella cartella docker (vedere nella documentazione come spegnere i container e avviarli senza cancellarli e crearli ogni volta)
    dovrebbe essere sudo docker-compose restart, solo che così facendo pare che non
2) Eseguire i comandi qui in alto in ordine nella cartella comandi
3) Avviare un consumer usando il container di kafka. 
  3.1) visualizza i container attivi e vedi l'id di kafka: sudo docker ps (IMPORTANTE USARE SUDO. ALTRIMENTI NON STAMPA NIENTE.)
  3.2) docker exec -it ID_KAFKA_DETTO_PRIMA sh
  3.3) usa il classico comando: 
kafka-console-consumer --bootstrap-server 192.168.160.195:29092 --topic topic_unity

4) per spegnere uso sudo docker-compose down ma da testare sudo docker-compose stop
https://docs.docker.com/compose/reference/ qui ci sono altri comandi.